Portable eXchange Data format

none	none
bool	false true
int	-192 +234 7899
real	0.15 0.7e-9 2245.3
date	1961-07-20  # ISO8601
text	'Some text which may include newlines' # see notes below
bytes	<20AC 65 66 48> # must be even number of digits; whitespace optional
list	[value1 value2 ... valueN]
dict	{key1 value1 key2 value2 ... keyN valueN}
record	recordname(value1 value2 ... valueN)
recordlist recordname[recordbody1 recordbody2 ... recordbodyN]
recorddict recordname{key1 recordbody1 key2 recordbody2 .. keyN recordbodyN}

Empty PXD

    {'PXD' [100]}

CSV to PXD

    Date,Price,Quantity,ID,Description
    2017-09-21,3.99,2,"CH1-A2","Chisel, 1in"
    2017-10-02,4.49,1,"H2-K9","Hammer, 2lb"
    2017-10-02,5.89,1,"SX4-D1","Eversure Sealant, 13floz"

    {'PXD' [100 'Price List']
    'records' [
	'Item' {'Date' date 'Price' real 'Quantity' int 'ID' text
		'Description' text}
    ]
    'data' Item[ # recordlist, i.e., a list of heterogeneous records
	(2017-09-21 3.99 2 'CH1-A2' 'Chisel, 1in')
	(2017-10-02 4.49 1 'H2-K9' 'Hammer, 2lb')
	(2017-10-02 5.89 1 'SX4-D1' 'Eversure Sealant, 13floz')
    ]
    }

INI to PXD (untyped)

    shapename = Hexagon
    zoom = 150
    showtoolbar = False
    [Window]
    x=615
    y=252
    width=592
    height=636

    {'PXD' [100 'MyApp Config']
    'data' { # dict
	'General' {'shapename' 'Hexagon' 'zoom' 150 'showtoolbar' false}
	'Window' {'x' 615 'y' 252 'width' 592 'height' 636}
    }
    }

INI to PXD (typed)

    {'PXD' [100 'MyApp Config']
    'records' [
	'General' {'shapename' text 'zoom' int 'showtoolbar' bool'}
	'Window' {'x' int 'y' int 'width' int 'height' int}
    ]
    'data' [ # list of heterogeneous records
	General('Hexagon' 150 false)
	Window(615 252 592 636)
    ]
    }


Database to PXD

    {'PXD' [100 'MyApp Data']
    'records' [
	'Customer' {'cid' int 'organization' text 'address' text
		    'contact' text 'phone' text 'email' text}
	'Invoice' {'inum' int 'cid' int 'raised' date 'due' date 'paid' bool
		   'description' text}
	'Item' {'iid' int 'inum' int 'date' date 'price' real
		'quantity' int 'description' text}
    ]
    'data' [ # list of recordlists
	Customer[
	    (50 'Best People' '123 Somewhere' 'John Doe' '' 'j@doe.com')
	    (19 'Supersuppliers' '' 'Jane Doe' '' 'jane@super.com')
	]
	Invoice[
	    (152 50 2022-01-17 2022-02-17 false 'COD')
	    (153 19 2022-01-19 2022-02-19 true 'COD')
	]
	Item[
	    (1839 152 2022-01-16 29.99 2 'Bales of hay')
	    (1840 152 2022-01-16 5.98 3 'Straps')
	    (1620 153 2022-01-19 11.50 1 'Washers (1-in)')
	]
    ]
    }

BNF

    PXD		::= "{" HEADER OWS RECORDDEFS? OWS DATA? OWS "}"
    HEADER	::= "'PXD'" OWS "[" OWS /\d{1,9}/ (RWS TEXT)? OWS "]"
    RECORDDEFS	::= OWS "'records'" OWS "[" RECORDDEF (OWS RECORDDEF)* "]"
    RECORDDEF	::= "'" IDENTIFIER "'" OWS
		    "{" OWS IDENTIFIER RWS TYPENAME
			(RWS IDENTIFIER RWS TYPENAME)* "}"
    DATA	::= "'data'" OWS (LIST | DICT | RECORDLIST | RECORDDICT)
    LIST	::= "[" OWS VALUE? (RWS VALUE)* OWS "]"
    DICT	::= "{" OWS (KEY RWS VALUE)? (RWS KEY RWS VALUE)* OWS "}"
    RECORDLIST	::= IDENTIFIER LIST
    RECORDDICT	::= IDENTIFIER DICT
    KEY		::= INT | DATE | TEXT
    VALUE	::= KEY | NONE | BOOL | REAL | BYTES | LIST | DICT
		 |  RECORD | RECORDLIST | RECORDDICT
    INT		::= /[-+]?\d+/
    DATE	::= /\d\d\d\d-\d\d-\d\d/ # must be a valid date
    TEXT	::= /'[^']*'/ # plus handle escapes:
	    # /[^]([nt^]|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{6}/
    NONE	::= "none"
    BOOL	::= "false" | "true"
    REAL	::= ### normal + scientific
    BYTES	::= "<" (OWS [A-Fa-f0-9]{2})* OWS ">"
    RECORD	::= IDENTIFIER "(" OWS VALUE (RWS VALUE)* ")"
		    # must be correct number of VALUEs of the correct types
    IDENTIFIER  ::= /\p{L}[\w.]*/
    OWS		::= /[\s\n]*/
    RWS 	::= /[\s\n]+/

# Plus comments are allowed at ends of lines.
